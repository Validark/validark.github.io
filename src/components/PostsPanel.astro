---
import { UNCATEGORIZED } from '@constants/constants'
import I18nKey from '../i18n/i18nKey'
import { i18n } from '../i18n/translation'
import { getSortedPosts } from '../utils/content-utils'
import { getPostUrlBySlug } from '../utils/url-utils'

interface Props {
  keyword?: string
  tags?: string[]
  categories?: string[]
}
const { keyword, tags, categories } = Astro.props

let posts = await getSortedPosts()

if (Array.isArray(tags) && tags.length > 0) {
  posts = posts.filter(
    post =>
      Array.isArray(post.data.tags) &&
      ['all', ...post.data.tags].some(tag => tags.includes(tag)),
  )
}

if (Array.isArray(categories) && categories.length > 0) {
  posts = posts.filter(
    post =>
      (post.data.category && categories.includes(post.data.category)) ||
      (!post.data.category && categories.includes(UNCATEGORIZED)),
  )
}

// const groups: { year: number; posts: typeof posts }[] = (() => {
//   const groupedPosts = posts.reduce(
//     (grouped: { [year: number]: typeof posts }, post) => {
//       const year = post.data.published.getFullYear()
//       if (!grouped[year]) {
//         grouped[year] = []
//       }
//       grouped[year].push(post)
//       return grouped
//     },
//     Object.create(null),
//   )

//   // convert the object to an array
//   const groupedPostsArray = Object.keys(groupedPosts).map(key => ({
//     year: Number.parseInt(key),
//     posts: groupedPosts[Number.parseInt(key)],
//   }))

//   // sort years by latest first
//   groupedPostsArray.sort((a, b) => b.year - a.year)
//   return groupedPostsArray
// })()

const groups: { groupBy: string | number; posts: typeof posts }[] = [
  { groupBy: 'Articles', posts },
]

if (
  !(Array.isArray(tags) && tags.length > 0) ||
  (tags.length === 1 && tags[0] === 'all')
) {
  groups.push({
    groupBy: 'DynSDT',
    posts: [
      {
        slug: '',
        data: {
          body: 'Please read paper at https://validark.dev/DynSDT/',
          title:
            'Heap-like Dynamic Score-Decomposed Tries for Top-k Autocomplete (Paper)',
          published: new Date(2022, 8, 15),
          description:
            'A paper on heap-like dynamic score-decomposed trie data structures for top-k autocomplete by Niles Salter.',
          tags: ['autocomplete'],
          customURL: 'https://validark.dev/DynSDT/',
        },
      },
      {
        slug: '',
        data: {
          body: 'This is a tech demo. Please visit https://validark.dev/DynSDT/demo/',
          title:
            'Step-by-step demonstration of the intuition behind DynSDT Autocomplete',
          published: new Date(2022, 8, 16),
          description:
            'A visual introduction to heap-like dynamic score-decomposed trie data structures for top-k autocomplete by Niles Salter.',
          tags: ['autocomplete'],
          customURL: 'https://validark.dev/DynSDT/demo/',
        },
      },
      {
        slug: '',
        data: {
          body: 'This is a tech demo. Please visit https://validark.dev/DynSDT/web-autocomplete/',
          title: 'Real-time client-side autocomplete engine with aliasing',
          published: new Date(2022, 8, 16),
          description: '',
          tags: ['autocomplete'],
          customURL: 'https://validark.dev/DynSDT/web-autocomplete/',
        },
      },
    ],
  })
}

const presentation_posts: typeof posts = []

presentation_posts.push(
  {
    slug: '',
    data: {
      body: '',
      title: 'Intro to SIMD',
      published: new Date(2024, 11, 12),
      description:
        'How a compression-based tokenizer greatly improves programming-language tokenizing throughput and how parse trees can be more efficiently stored and constructed',
      tags: ['simd'],
      customURL: 'https://www.youtube.com/watch?v=fajcuqMX-mo',
      slides: 'https://validark.dev/presentations/simd-intro',
    },
  },
  {
    slug: '',
    data: {
      body: '',
      title: 'Hyper-Optimizing the Zig Parser (With Vector Compression!)',
      published: new Date(2024, 9, 10),
      description:
        'How a compression-based tokenizer greatly improves programming-language tokenizing throughput and how parse trees can be more efficiently stored and constructed',
      tags: ['simd'], // 'avx512'
      customURL: 'https://www.youtube.com/watch?v=NM1FNB5nagk',
    },
  },
  {
    slug: '',
    data: {
      body: 'Slides available at https://validark.dev/presentations/hyper-optimizing-zig-parser',
      title: 'Hyper-Optimizing the Zig Parser',
      published: new Date(2024, 4, 9),
      description:
        "A presentation on how SIMD and SWAR can be used to make a programming language's tokenizer faster by Niles Salter.",
      tags: ['simd', 'aarch64'],
      customURL: 'https://www.youtube.com/live/FDiUKafPs0U&t=210s',
      slides:
        'https://validark.dev/presentations/hyper-optimizing-zig-parser',
    },
  },
  {
    slug: '',
    data: {
      body: 'Slides available at https://validark.dev/presentations/accelerating-zig-parser',
      title: 'Accelerating the Zig Parser',
      published: new Date(2024, 0, 11),
      description:
        "A presentation on how SIMD and SWAR can be used to make a programming language's tokenizer faster by Niles Salter.",
      tags: ['simd'],
      customURL: 'https://www.youtube.com/watch?v=oN8LDpWuPWw&t=530s',
      slides:
        'https://validark.dev/presentations/accelerating-zig-parser',
    },
  },
)

if (
  !(Array.isArray(tags) && tags.length > 0) ||
  (tags.length === 1 &&
    presentation_posts
      .reduce(
        (a, e) => {
          for (const tag of e.data.tags) a.add(tag)
          return a
        },
        new Set(['all']),
      )
      .has(tags[0]))
) {
  groups.push({
    groupBy: 'Presentations',
    posts:
      Array.isArray(tags) && tags.length > 0 && tags[0] !== 'all'
        ? presentation_posts.filter(e => e.data.tags.includes(tags[0]))
        : presentation_posts,
  })
}

// href="https://validark.dev/DynSDT/demo/"
// href="https://validark.dev/DynSDT/web-autocomplete/"

// (Desktop only) DynSDT interactive explanation
// (Desktop only) DynSDT: Real-time client-side autocomplete engine with aliasing

function formatDate(date: Date) {
  const year = date.getFullYear()
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const day = date.getDate().toString().padStart(2, '0')
  const result = `${year}-${month}-${day}`
  if ('2022-09-15' === result) return '2022'
  if ('2022-09-16' === result) return ''
  return result
}

function formatTag(tag: string[]) {
  return tag.map(t => `#${t}`).join(' ')
}
---

<div class="card-base px-8 py-6">
    {
        groups.map(group => (
            <div>
                {group.groupBy && <div class="flex flex-row w-full items-center h-[3.75rem]">
                    <div class="w-[15%] md:w-[10%] transition text-2xl font-bold text-right text-75">{group.groupBy}</div>
                    {/* <div class="w-[15%] md:w-[2%]"> */}
                        {/* <div class="h-3 w-3 bg-none rounded-full outline outline-[var(--primary)] mx-auto -outline-offset-[2px] z-50 outline-3"></div> */}
                    {/* </div> */}
                    {/* <div class="w-[70%] md:w-[80%] transition text-left text-50">{group.posts.length} {i18n(I18nKey.postsCount)}</div> */}
                </div>}
                {group.posts.map((post, i) => (
                    <a href={post.data.customURL || getPostUrlBySlug(post.slug)}
                       aria-label={post.data.title}
                       target={post.data.customURL ? "_blank" : ""}
                       rel={post.data.customURL ? "noopener noreferrer" : ""}
                       class="group btn-plain block h-10 w-full rounded-lg hover:text-[initial] xxxs:mt-[9rem] xxs:mt-[6rem] xs:mt-[3rem] sm:mt-[2.5rem] md:mt-[1rem] lg:mt-[1rem] xl:mt-[0.25rem]"
                    >
                        <div class="flex flex-row justify-start items-center h-full">
                            <!-- date -->
                            <div class="w-[15%] xxxs:w-[40%] xxs:w-[40%] md:w-[10%] sm:w-[95%] xs:w-[20%] transition text-sm text-right text-50 whitespace-nowrap">
                                {formatDate(post.data.published)}
                            </div>
                            <!-- dot and line -->

                            <div class=`w-[15%] md:w-[10%] relative ${formatDate(post.data.published) && i ? "dash-line" : ""} h-full flex items-center`>
                              <!--
                                <div class="transition-all mx-auto w-1 h-1 rounded group-hover:h-5
                                bg-[oklch(0.5_0.05_var(--hue))] group-hover:bg-[var(--primary)]
                                outline outline-4 z-50
                                outline-[var(--card-bg)]
                                group-hover:outline-[var(--btn-plain-bg-hover)]
                                group-active:outline-[var(--btn-plain-bg-active)]
                                "
                                ></div> -->
                                <div class="transition-all h-3 w-3 bg-none outline outline-[var(--primary)] mx-auto -outline-offset-[2px] z-50 outline-3
                                group-hover:bg-[var(--primary)]"></div>
                            </div>
                            <!-- post title -->
                            <div class="w-[70%] md:max-w-[65%] md:w-[65%] text-left font-bold
                                group-hover:translate-x-1 transition-all group-hover:text-[var(--primary)]
                                text-75 pr-8"
                            >
                                    {post.data.title}
                            </div>
                            <!-- tag list -->
                            {
                              post.data.tags && post.data.tags.length > 0 && !post.data.slides &&
                            <div class="hidden md:block md:w-[15%] text-left text-sm transition whitespace-nowrap overflow-ellipsis text-30"
                            >{formatTag(post.data.tags)}</div>
                            }

                            {
                            post.data.slides && <div class="hidden md:block md:w-[15%] text-left text-sm transition whitespace-nowrap overflow-ellipsis text-30"
                            >{<span data_link={post.data.slides} class="slides-link" style="color: var(--primary)">&lt;slides&gt;</span>}</div>
                           }

                           <script>
                            for (const slides_links of document.getElementsByClassName("slides-link")) {
                                slides_links.innerHTML = `<a href="${slides_links.getAttribute("data_link")}">&lt;slides here&gt;</a>`;
                            }
                           </script>
                        </div>
                    </a>
                ))}
            </div>
        ))
    }
</div>

<style>
    @tailwind components;
    @tailwind utilities;

    @layer components {
        .dash-line {
        }
        .dash-line::before {
            content: "";
            @apply w-[10%]

            xxxs:h-[425%]
            xxs:h-[298%]
            xs:h-[179%]
            sm:h-[162%]
            md:h-[110%]
            lg:h-[105%]
            xl:h-3/4

            xxxs:-top-[393%]
            xxs:-top-[266%]
            xs:-top-[150%]
            sm:-top-[132%]
            md:-top-[79%]
            lg:-top-[70%]
            xl:-top-[37%]

            absolute left-[calc(50%_-_1px)] border-l-[2px] border-dashed pointer-events-none border-[var(--line-color)] transition
        }
    }
</style>
